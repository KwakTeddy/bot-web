var path = require('path');
var type = require(path.resolve('modules/bot/action/common/type'));
var address = require(path.resolve('./modules/bot/action/common/address'));
var navertask = require('./navertask');
var publictask = require('./publictask');
var googletask = require('./googletask');
var core = require('./core');

var pre = /(?:~이전|~앞|^<$)/;
var next = /(?:~다음|~뒤|^>$)/;
var up = /(?:^0$)/
var first = /(?:~시작|~처음|^!$|취소)/


현재날씨:
<{types: [{name: 'address', typeCheck: address.addressTypeCheck2, raw: true}], regexp: /날씨/}
{action: publictask.currentweather}
>안녕+weather+ +temp+ +humidity+ +wind+

예보:
<{types: [{name: 'address', typeCheck: address.addressTypeCheck2, raw: true}], regexp: /예/}
{action: publictask.forecastweather}
>+weather+ +temp+ +humidity+ +wind+

<환율
>환율코드를 알려주세요 ex) USD or 달러?
    <{regexp: /[A-Z|a-z|가-힣]/g}
    {action: publictask.exchangerate}
    > if(context.dialog.item.length != 0) +date+ 현재 환율은 +rate+입니다.

<주가
>회사코드나 이름을 알려주세요 AAPL or 삼성전자?
    <{regexp: /[A-Z|a-z|가-힣]/g}
    {action: publictask.stockprice}
    > if(context.dialog.item.length != 0) +name+의 +lastTradeDate+ 종가는 +lastTradePriceOnly+입니다.

뉴스:
<뉴스
navertask.newscrawl
>이응

메일:
<메일
{action: googletask.gmailapi}
>if(!(context.user.google_accesstoken)) {call:'등록'}
>if(context.user.google_accesstoken) #item#+index+. +sendman+\n+title+\n#
    <{types: [{name: 'mail', listName: 'item', typeCheck: 'listTypeCheck'}]}
    > +mail.sendman+\n\n+mail.title+\n\n+mail.snippet+

등록:
<false
>아래 링크에서 액세스를 수락해주세요.\nhttps:\/\/accounts.google.com\/o\/oauth2\/v2\/auth?scope=https%3A%2F%2Fmail.google.com%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fcalendar%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fcalendar.readonly%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.email%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.profile&state=+userId+&redirect_uri=https%3A%2F%2Fdev.moneybrain.ai%2Fapi%2Fauth%2Fgmail%2Fcallback&access_type=offline&response_type=code&client_id=567723322080-uopbt6mrcntsqn79hr8j260t5sbsui8n.apps.googleusercontent.com

캘린더:
<일정
{action: googletask.calendarapi}
>if(!(context.user.google_accesstoken)) {call:'등록'}
>if(context.user.google_accesstoken) #item#+index+. +summary+\n#
    <{types: [{name: 'calendar', listName: 'item', typeCheck: 'listTypeCheck'}]}
    {action: googletask.eventapi}
    >#event#+index+. +summary+\n시간: +dateTime+\n#

인기봇:
<인기 봇
{action: core.popularbotlist}
> 인기봇 리스트입니다.\n#popularbot#+index+. +name+\n#
    < {types: [{name: 'selectbot', listName: 'popularbot', typeCheck: 'listTypeCheck'}]}
    {action: core.connectBot}
    > 봇이 변경되었습니다.

최신봇:
<최신 봇
{action: core.newbotlist}
> 최신봇 리스트입니다.\n#newbot#+index+. +name+\n#
    < {types: [{name: 'selectbot', listName: 'newbot', typeCheck: 'listTypeCheck'}]}
    {action: core.connectBot}
    > 봇이 변경되었습니다.

친구봇:
<친구 봇
{action: core.userCheck}
>if(context.user.check == true) {call:'친구봇리스트'}
>if(context.user.check == false) ID[이메일]를 입력해주세요
    <{types: [{name: 'email', typeCheck: core.emailTypeCheck, raw: true}]}
    {action: core.authemail}
    >if(context.dialog.emailusercheck == true) 고객님의 메일로 인증코드를 전송하였습니다.\n인증코드를 입력해주세요.
        < {types: [{name: 'code', typeCheck: core.codeTypeCheck, raw: true}]}
        {action: core.authcode}
        >if(context.dialog.codecheck == true) {call:'친구봇리스트'}
        >if(context.dialog.codecheck == false) {repeat: 1, options: {output: '인증코드가 잘못되었습니다.\n다시입력해주세요.'}}
        <{if: 'true'}> {repeat: 1, options: {output: '인증코드의 형식이 틀렸습니다.\n다시입력해주세요.'}}
    >if(context.dialog.emailusercheck == false) {repeat: 1, options: {output: '가입되지 않은 ID[이메일]입니다.\n아래 링크에서 가입 후 진행해주세요.'}}
    <{if: 'true'}> {repeat: 1, options: {output: 'ID[이메일] 형식이 틀렸습니다.\n다시입력해주세요.'}}

친구봇리스트:
<친구 봇
{action: core.followbotlist}
> 친구봇 리스트입니다.\n#followbot#+index+. +name+\n#
    < {types: [{name: 'selectbot', listName: 'followbot', typeCheck: 'listTypeCheck'}]}
    {action: core.connectBot}
    > 봇이 변경되었습니다.

마이봇:
<마이 봇
{action: core.userCheck}
>if(context.user.check == true) {call:'마이봇리스트'}
>if(context.user.check == false) ID[이메일]를 입력해주세요d
    <{types: [{name: 'email', typeCheck: core.emailTypeCheck, raw: true}]}
    {action: core.authemail}
    >if(context.dialog.emailusercheck == true) 고객님의 메일로 인증코드를 전송하였습니다.\n인증코드를 입력해주세요.
        < {types: [{name: 'code', typeCheck: core.codeTypeCheck, raw: true}]}
        {action: core.authcode}
        >if(context.dialog.codecheck == true) {call:'마이봇리스트'}
        >if(context.dialog.codecheck == false) {repeat: 1, options: {output: '인증코드가 잘못되었습니다.\n다시입력해주세요.'}}
        <{if: 'true'}> {repeat: 1, options: {output: '인증코드의 형식이 틀렸습니다.\n다시입력해주세요.'}}
    >if(context.dialog.emailusercheck == false) {repeat: 1, options: {output: '가입되지 않은 ID[이메일]입니다.\n아래 링크에서 가입 후 진행해주세요.'}}
    <{if: 'true'}> {repeat: 1, options: {output: 'ID[이메일] 형식이 틀렸습니다.\n다시입력해주세요.'}}

마이봇리스트:
<false
{action: core.mybotlist}
> 마이봇 리스트입니다.\n#mybot#+index+. +name+\n#
    < {types: [{name: 'selectbot', listName: 'mybot', typeCheck: 'listTypeCheck'}]}
    {action: core.connectBot}
    > 봇이 변경되었습니다.

구글검색:
</([^\b]*)(?:\b|\s).*(검색)/
{action: googletask.googlesearch}
>#result#+index+. +title+\n#
    <{types: [{name: 'result', listName: 'result', typeCheck: 'listTypeCheck'}]}
    {action: function (task,context,callback) {
        task.url = context.dialog.result.url;
        task.urlMessage = '결과보기';
        console.log('=======' + context.dialog.result.snippet);
        callback(task,context);
    }}
    >+result.title+\n+result.snippet+\n+url+

주변검색둘:
< {types: [{name: 'address', typeCheck: address.addressTypeCheck2, raw: true}]}
{action: navertask.searchNaver}
>if(context.dialog.item.length == 0) 검색결과가 존재하지 않습니다.
>if(context.dialog.item.length != 0) #item#+index+. +title+\n#
    <{types: [{name: 'item', listName: 'item', typeCheck: 'listTypeCheck'}]}
    >+item.title+\n+item.roadAddress+\n+item.telephone+

주변검색:
<주변
>말씀해주세요.
    < {types: [{name: 'address', typeCheck: address.addressTypeCheck2, raw: true}]}
    {action: navertask.searchNaver}
    >if(context.dialog.item.length == 0) {repeat: 1, options: {output: '검색결과가 존재하지 않습니다.'}}
    >if(context.dialog.item.length != 0) #item#+index+. +title+\n#
        <{types: [{name: 'item', listName: 'item', typeCheck: 'listTypeCheck'}]}
        >+item.title+\n+item.roadAddress+\n+item.telephone+
    <{if: 'true'}> {repeat: 1, options: {output: '주소와 함께 찾을 곳을 입력해주세요.\n[예시]\n방배동 주변 은행\n서울시 중구 레스토랑'}}


시작:
c<{regexp: first}
> 인기봇, 최신봇, 친구봇, 마이봇 중에 어떤 것을 안내해드릴까요?

c<{regexp: up}
>{up:1}

c<{regexp: pre}
>{repeat: 1, options: {page: 'pre'}}

c<{regexp: next}
>{repeat: 1, options: {page: 'next'}}
