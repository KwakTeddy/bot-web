var dialogs = [
    {
        "name": "함수 기능",
        "input": [
            {
                "text": {
                    "raw": "함수 기능",
                    "nlp": "함수 기능"
                }
            }
        ],
        "output": [
            {
                "kind": "Content",
                "text": "함수는 챗봇 답변이 실행 되기 전 자바스크립트(Java Script)를 이용해 다양한 테스크(TASK)를 처리하는 기능입니다. \n \n예를 들어, 답변 전 실행함수에서 api함수를 만들어 외부 서버의 API를 이용할 수 있습니다.\n\n답변 전 실행 함수 입력 창에 포커스 되면 함수 가이드가 실행됩니다.\n\ndefault.js 파일에 함수를 만듭니다.\n\nAPI 이용에 대한 자세한 설명을 원하시면 아래 버튼을 눌러주세요.",
                "buttons": [
                    {
                        "url": "",
                        "text": "함수 구조 설명"
                    },
                    {
                        "url": "",
                        "text": "API 이용 설명"
                    }
                ]
            }
        ],
        "id": "default0",
        "children": [
            {
                "name": "함수 구조 설명",
                "input": [
                    {
                        "text": {
                            "raw": "함수 구조 설명",
                            "nlp": "함수 구조 설명"
                        }
                    }
                ],
                "output": [
                    {
                        "kind": "Content",
                        "text": "함수의 구조는 다음과 같습니다.\n\nvar testTask = \n{\n\n       action: function (task, context, callback) \n{\n\n\t\t\t//함수 기능  코드 삽입\n\n\t\t    callback(task, context)\n}\n\n}\n\ntestTask라는 변수(var)에 객체(예시 : {key: value})를 넣습니다. \n\ntestTask 객체의 경우 key가 action이고 value가 함수입니다. \n\n함수는 task, context, callback을 매개변수로 받습니다.\n\n1. task\n\ntask에는 함수에 대한 정보가 들어 있으며, 챗봇 답변의 텍스트, 버튼, 이미지를 조작할 수 있습니다.\n\n2. context\n\ncontext에는 사용자에 대한 정보(context.user), 챗봇에 대한 정보(context.bot), 사용자의 입력값에 대한 정보(context.dialog) 등이 들어있습니다.\n\n3. callback\n\ncallback은 해당 함수를 끝내는 기능을 가지기 때문에, 함수의 기능이 끝난 지점에 위치시킵니다.\n\n//함수 기능 코드 삽입 부분에서 task, context, callback 매개변수를 이용하여 원하는 기능을 구현합니다.",
                        "buttons": [
                            {
                                "url": "",
                                "text": "함수 파라미터 task 구체적 설명"
                            },
                            {
                                "url": "",
                                "text": "함수 파라미터 context 구체적 설명"
                            },
                            {
                                "url": "",
                                "text": "함수 파라미터 callback 구체적 설명"
                            }
                        ]
                    }
                ],
                "id": "default1",
                "children": [
                    {
                        "name": "함수 파라미터 task",
                        "input": [
                            {
                                "text": {
                                    "raw": "함수 파라미터 task 구체 설명",
                                    "nlp": "함수 파라미터 task 구체 설명"
                                }
                            }
                        ],
                        "output": [
                            {
                                "kind": "Content",
                                "text": "함수 파라미터 task에는 해당 함수에 대한 정보가 들어옵니다.\n\n또한 task 파라미터를 통해서 '챗봇 답변'의 텍스트, 이미지, 버튼을 동적으로 조작할 수 있습니다.\n\n1, 텍스트 동적 조작\n\ntask.output = '제 이름은' + context.bot.botName + '입니다.'\n\n챗봇 답변의 텍스트가 동적으로 조작됩니다.\n\n2, 이미지 조작\n\ntask.image = {url: 'http://moneybrain.ai/img/dark-logo.jpg'}\n\n챗봇 답변의 이미지가 해당 url의 이미지로 변경됩니다.\n\n3, 버튼  조작\n\ntask.buttons = [{text : '버튼1'}, {text: '버튼2', url: 'http://map.naver.com'}]\n\n챗봇 답변의 버튼이 해당 버튼들로 변경됩니다."
                            }
                        ],
                        "id": "default2"
                    },
                    {
                        "name": "함수 파라미터 context",
                        "input": [
                            {
                                "text": {
                                    "raw": "함수 파라미터 context 구체 설명",
                                    "nlp": "함수 파라미터 context 구체 설명"
                                }
                            }
                        ],
                        "output": [
                            {
                                "kind": "Content",
                                "text": "함수 파라미터 context에는 챗봇 정보, 사용자 정보, 대화 정보 등이 담겨 있습니다.\n\n1, 챗봇 정보\n\ncontext.bot = \n{\n\t    botName: \"playchat\",\n\t    description: \"playchat 봇입니다.\"\n\t    using: true,\n            ....\n}\ncontext.bot.botName과 같은 형태로 해당 값에 접근할 수 있습니다.\n\n2, 사용자 정보\n\ncontext.user = \n{\nuserKey:\"5a4d91842b7a1e41079c0d9a\",\n            ....\n}\ncontext.user.userKey와 같은 형태로 해당 값에 접근할 수 있습니다.\n\n3, 채널 정보\n\ncontext.channel = \n{\n\t\tname: \"kakao\",\n\t\t...\n}\n\ncontext.channel.name와 같은 형태로 해당 값에 접근할 수 있습니다.\n\n4, 대화 정보\n\ncontext.dialog = \n{\n\t\tinNLP = \"반갑다\",\n\t\tinRaw = \"반갑스무니다\",\n\t\tinCurRaw = \"반갑스무니다\",\n\t\t...\n}\ncontext.dialog.inRaw와 같은 형태로 해당 값에 접근할 수 있습니다.\n\ninRaw는 자연어 처리되기 전 사용자의 입력 값이고, inNLP는 자연어 처리된 사용자의 입력 값입니다."
                            }
                        ],
                        "id": "default3"
                    },
                    {
                        "name": "함수 파라미터 callback",
                        "input": [
                            {
                                "text": {
                                    "raw": "함수 파라미터 callback 구체 설명",
                                    "nlp": "함수 파라미터 callback 구체 설명"
                                }
                            }
                        ],
                        "output": [
                            {
                                "kind": "Content",
                                "text": "함수 파라미터 callback은 실행될 경우 해당 기능 함수가 종료됩니다.\n\n따라서 해당 기능 함수의 로직이 끝난 다음에 실행되어야 합니다.\n\ncallback에 대한 더 자세한 이해를 원하시는 분은 자바스크립트(Java Script) callback 개념을 살펴보시기 바랍니다.",
                                "buttons": [
                                    {
                                        "url": "https://opentutorials.org/course/743/6508",
                                        "text": "자바스크립트 Callback 이해하기"
                                    }
                                ]
                            }
                        ],
                        "id": "default4"
                    }
                ]
            },
            {
                "name": "API 구현 설명",
                "input": [
                    {
                        "text": {
                            "raw": "API 이용 설명",
                            "nlp": "API 이용 설명"
                        }
                    }
                ],
                "output": [
                    {
                        "kind": "Content",
                        "text": "API 이용을 위해서는 한 가지 자바스크립트(Node.js) 모듈을 이용합니다.\n\n모듈을 이용하기 위해서는 default.js 파일의 최상단에 다음을 추가합니다.\n\nvar request = require('request')\n\nrequest라는 모듈을 require하여 request 라는 변수(var)에 넣는 것입니다.\n\nrequest 모듈을 이용해 사용하고자 하는 API에 http 요청을 보내 결과 값을 가져옵니다.\n\nvar client_id = 'tXRaAWut2_2R5OkcLpLQ'\n\nvar client_secret = 'TaU4yqU4fI'\n\nvar api_url = 'https://openapi.naver.com/v1/search/movie.json'\n\nvar options = \n{\n            method : \"GET\",\n            url : api_url,\n            headers : {'X-Naver-Client-Id' : client_id, 'X-Naver-Client-Secret' : client_secret},\n            qs: { query: '사건'}\n}\n\nrequest(options, \nfunction(err, response, body)\n{\n//body에 들어온 정보를 이용해 코드 구성\n}\n)\n\n결과 값을 context.dialog.apiResult에 담습니다.\n\ncontext.dialog.apiResult = body\n\n위의 예시는 네이버 API 중 영화 검색 API를 이용해 '사건'을 검색한 것입니다.",
                        "buttons": [
                            {
                                "url": "",
                                "text": "request 모듈 설명"
                            },
                            {
                                "url": "",
                                "text": "API 이용 설명"
                            }
                        ]
                    }
                ],
                "id": "default5",
                "children": [
                    {
                        "name": "request 모듈 설명",
                        "input": [
                            {
                                "text": {
                                    "raw": "request 모듈 설명",
                                    "nlp": "request 모듈 설명"
                                }
                            }
                        ],
                        "output": [
                            {
                                "kind": "Content",
                                "text": "request 모듈은 http 요청을 외부 서버에 간단하게 보내게 해주는 모듈입니다.\n\n사용법은 request(option, callback함수)입니다.\n\n1. option\nrequest함수의 option 매개 변수는 http 요청의 구체적 내용을 설정하는 것입니다.\n\n예시.\nvar option = \n{\nmethod: 'GET',\nurl: 'https://playchat.ai',\n}\n\noption 란에 url을 단순히 입력할시 method는 GET으로 설정됩니다.\n\n2. callback 함수\n\nrequest함수의 callback함수 매개 변수는 http 요청 이후의 결과를 받는 함수입니다.\n\nfuction(err, response, body)\n{\n\n}\n\ncallback함수의 err 매개변수는 만약 http 요청이 오류가 났을 시에 값이 담겨 옵니다.\n\ncallback함수의 response 매개변수는 http 요청의 서버 반응 값들이 담겨 옵니다.\n\nbody의 결과 값을 이용해 원하는 조작을 하면 됩니다.\n\ncallback함수의 body 매개변수는 http 요청의 결과 값이 담겨 옵니다."
                            }
                        ],
                        "id": "default6"
                    }
                ]
            }
        ]
    },
    {
        "name": "함수 구현 _ API",
        "input": [
            {
                "text": {
                    "raw": "api",
                    "nlp": "api"
                }
            }
        ],
        "output": [
            {
                "kind": "Content",
                "text": "API를 실행했습니다.\n\nAPI의 결과는 아래와 같습니다.\n\n#apiResult.items#\n+index+.\n+title+\n\n#"
            }
        ],
        "task": {
            "name": "api"
        },
        "id": "default7"
    }
];

var commonDialogs = [
    {
        "id": "startDialog",
        "name": "开始",
        "input": [
            {
                "text": {
                    "raw": "start",
                    "nlp": "start"
                }
            },
            {
                "text": {
                    "raw": "开始",
                    "nlp": "开始"
                }
            },
            {
                "text": {
                    "raw": "初始画面",
                    "nlp": "初始画面"
                }
            }
        ],
        "output": [{
            "kind": "Content",
            "text": "您好, 我是+bot.name+。"
        }]
    },
    {
        "id": "backDialog",
        "name": "返回",
        "input": [
            {
                "text": {
                    "raw": "back",
                    "nlp": "back"
                }
            },
            {
                "text": {
                    "raw": "返回",
                    "nlp": "返回"
                }
            }
        ],
        "output": [
            {
                "kind": "Action",
                "type": "back"
            }
        ]
    },
    {
        "id": "upDialog",
        "name": "上一页",
        "input": [
            {
                "text": {
                    "raw": "up",
                    "nlp": "up"
                }
            },
            {
                "text": {
                    "raw": "上一页",
                    "nlp": "上一页"
                }
            }
        ],
        "output": [
            {
                "kind": "Action",
                "type": "up"
            }
        ]
    },
    {
        "id": "noanswer",
        "name": "没有回答",
        "input": "",
        "output": [
            {
                text: "我不是很明白您的意思。",
                kind: 'Content'
            }
        ]
    }
];

module.exports = function(bot)
{
    bot.setDialogs(dialogs);
    bot.setCommonDialogs(commonDialogs);
};
